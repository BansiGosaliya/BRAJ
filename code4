   #include<GSM.h>
	#define PINNUMBER ""
	GSM gsmAccess;
	GSM_SMS sms;
GSMVoiceCall vcs;
char numtel[20];
char senderNumber[20];

	void setup()
	{
	  Serial.begin(9600);
	  while (!Serial);
{
  Serial.println("Receive Voice Call");
  boolean notConnected = true;
    vcs.hangCall();
 Serial.println("Waiting for a call");
}
	
	
	
	  Serial.println("SMS Messages Sender");  
	  boolean notConnected = true;
	
	  while (notConnected)
	  {
	    if (gsmAccess.begin(PINNUMBER) == GSM_READY)
	      notConnected = false;
	    else
	    {
	      Serial.println("Not connected");
	      delay(1000);
	    }
	  }
	  Serial.println("GSM initialized");

  Serial.println("SMS Messages Receiver");
  boolean notConnected = true;
  while (notConnected)
  {
    if (gsmAccess.begin(PINNUMBER) == GSM_READY)
      notConnected = false;
    else
    {
      Serial.println("Not connected");
      delay(1000);
    }
  }
 Serial.println("GSM initialized");
  Serial.println("Waiting for messages");
	}
	
	void loop()
	{
	  Serial.print("8980404678");
	  char remoteNum[20]; 
	  readSerial(remoteNum);
	  Serial.println(remoteNum);  
	  Serial.print("s");
	  char txtMsg[200];
	  readSerial(txtMsg);
	  Serial.println("SENDING");
	  Serial.println();
	  Serial.println("Message:");
	  Serial.println(txtMsg);
	
	  sms.beginSMS(remoteNum);
	  sms.print(txtMsg);
	  sms.endSMS();
	  Serial.println("\nCOMPLETE!\n");
	}
	
	int readSerial(char result[])
	{
	  int i = 0;
	  while (1)
	  {
	    while (Serial.available() > 0)
	    {
	      char inChar = Serial.read();
	      if (inChar == '\n')
	      {
	        result[i] = '\0';
	        Serial.flush();
	        return 0;
	      }
	      if (inChar != '\r')
	      {
	        result[i] = inChar;
	        i++;
	      }
	    }
	  }
{
  switch (vcs.getvoiceCallStatus())
  {
    case IDLE_CALL: 
      break;

    case RECEIVINGCALL: 
      Serial.println("RECEIVING CALL");
      vcs.retrieveCallingNumber(numtel, 20);

     Serial.print("Number:");
      Serial.println(numtel);
      while (Serial.read() != '\n')
        delay(100);
      vcs.hangCall();
      Serial.println("Hanging up and waiting for the next call.");
      break;
  }
  delay(1000);
{
  char c;
  if (sms.available())
  {
    Serial.println("Message received from:");
    sms.remoteNumber(senderNumber, 20);
    Serial.println(senderNumber);
    if (sms.peek() == '#')
    {
      Serial.println("Discarded SMS");
      sms.flush();
    }
    while (c = sms.read())
      Serial.print(c);

    Serial.println("\nEND OF MESSAGE");
    sms.flush();
    Serial.println("MESSAGE DELETED");
  }
 delay(1000);
}
}
	}

